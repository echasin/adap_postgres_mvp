package com.innvo.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.innvo.domain.Vulnerability;
import com.innvo.repository.VulnerabilityRepository;
import com.innvo.repository.search.VulnerabilitySearchRepository;
import com.innvo.web.rest.util.HeaderUtil;
import com.innvo.web.rest.util.PaginationUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.inject.Inject;
import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * REST controller for managing Vulnerability.
 */
@RestController
@RequestMapping("/api")
public class VulnerabilityResource {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityResource.class);
        
    @Inject
    private VulnerabilityRepository vulnerabilityRepository;
    
    @Inject
    private VulnerabilitySearchRepository vulnerabilitySearchRepository;
    
    /**
     * POST  /vulnerabilitys -> Create a new vulnerability.
     */
    @RequestMapping(value = "/vulnerabilitys",
        method = RequestMethod.POST,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Vulnerability> createVulnerability(@Valid @RequestBody Vulnerability vulnerability) throws URISyntaxException {
        log.debug("REST request to save Vulnerability : {}", vulnerability);
        if (vulnerability.getId() != null) {
             return ResponseEntity.badRequest().header("Failure", "A new vulnerability cannot already have an ID").body(null);
            // Commented Out echasin - Migrated code from adap_postgres_mvp_codegen_oauth.  Replace with code above.
            //return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("vulnerability", "idexists", "A new vulnerability cannot already have an ID")).body(null);
        }
        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        vulnerabilitySearchRepository.save(result);
        return ResponseEntity.created(new URI("/api/vulnerabilitys/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert("vulnerability", result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /vulnerabilitys -> Updates an existing vulnerability.
     */
    @RequestMapping(value = "/vulnerabilitys",
        method = RequestMethod.PUT,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Vulnerability> updateVulnerability(@Valid @RequestBody Vulnerability vulnerability) throws URISyntaxException {
        log.debug("REST request to update Vulnerability : {}", vulnerability);
        if (vulnerability.getId() == null) {
            return createVulnerability(vulnerability);
        }
        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        vulnerabilitySearchRepository.save(result);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert("vulnerability", vulnerability.getId().toString()))
            .body(result);
    }

    /**
     * GET  /vulnerabilitys -> get all the vulnerabilitys.
     */
    @RequestMapping(value = "/vulnerabilitys",
        method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<List<Vulnerability>> getAllVulnerabilitys(Pageable pageable)
        throws URISyntaxException {
        log.debug("REST request to get a page of Vulnerabilitys");
        Page<Vulnerability> page = vulnerabilityRepository.findAll(pageable); 
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/vulnerabilitys");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /vulnerabilitys/:id -> get the "id" vulnerability.
     */
    @RequestMapping(value = "/vulnerabilitys/{id}",
        method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Vulnerability> getVulnerability(@PathVariable Long id) {
        log.debug("REST request to get Vulnerability : {}", id);
        Vulnerability vulnerability = vulnerabilityRepository.findOne(id);
        return Optional.ofNullable(vulnerability)
            .map(result -> new ResponseEntity<>(
                result,
                HttpStatus.OK))
            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * DELETE  /vulnerabilitys/:id -> delete the "id" vulnerability.
     */
    @RequestMapping(value = "/vulnerabilitys/{id}",
        method = RequestMethod.DELETE,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Void> deleteVulnerability(@PathVariable Long id) {
        log.debug("REST request to delete Vulnerability : {}", id);
        vulnerabilityRepository.delete(id);
        vulnerabilitySearchRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("vulnerability", id.toString())).build();
    }

    /**
     * SEARCH  /_search/vulnerabilitys/:query -> search for the vulnerability corresponding
     * to the query.
     */
    @RequestMapping(value = "/_search/vulnerabilitys/{query}",
        method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public List<Vulnerability> searchVulnerabilitys(@PathVariable String query) {
        log.debug("REST request to search Vulnerabilitys for query {}", query);
        return StreamSupport
            .stream(vulnerabilitySearchRepository.search(queryStringQuery(query)).spliterator(), false)
            .collect(Collectors.toList());
    }
}
